<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/ptu5/data/joins.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1500"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainorder_"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="coder" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="78"/><column index="2" value="75"/><column index="3" value="41"/><column index="4" value="40"/><column index="5" value="68"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="coders" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="3" mode="1"/></sort><column_widths><column index="1" value="78"/><column index="2" value="75"/><column index="3" value="125"/><column index="4" value="158"/><column index="5" value="68"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="coders_skills" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="64"/><column index="2" value="50"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="customer" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="40"/><column index="2" value="78"/><column index="3" value="128"/><column index="4" value="204"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="order_" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="40"/><column index="2" value="88"/><column index="3" value="152"/><column index="4" value="223"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="passwords" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort><column index="3" mode="0"/></sort><column_widths><column index="1" value="40"/><column index="2" value="64"/><column index="3" value="137"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="product" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="40"/><column index="2" value="165"/><column index="3" value="106"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="product_order" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="63"/><column index="2" value="78"/><column index="3" value="63"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="skills" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="40"/><column index="2" value="45"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="status" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="40"/><column index="2" value="187"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="tasks" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="40"/><column index="2" value="163"/><column index="3" value="80"/><column index="4" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="teams" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="40"/><column index="2" value="62"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">CREATE TABLE coder (
	first_name VARCHAR(50),
	last_name VARCHAR(100),
	email VARCHAR(255),
	age INTEGER,
	xp_years INTEGER
);

CREATE TABLE teams (
	id INTEGER PRIMARY KEY NOT NULL, 
	name VARCHAR(50) NOT NULL
);


	
CREATE TABLE coders (
	id INTEGER PRIMARY KEY NOT NULL,
	first_name 	VARCHAR(50) NOT NULL,
	last_name VARCHAR(100) NOT NULL,
	email VARCHAR(255) UNIQUE,
	age INTEGER CHECK (age &gt; 17 AND age &lt; 75),
	xp_years INTEGER CHECK (xp_years &gt; 0 AND xp_years &lt; 50), 
	team_id INTEGER, 
	FOREIGN KEY (team_id) REFERENCES teams (id)
);

CREATE TABLE tasks (
	id INTEGER PRIMARY KEY NOT NULL,
	name VARCHAR(255) NOT NULL,
	description TEXT,
	coder_id INTEGER,
	FOREIGN KEY (coder_id) REFERENCES coders(id)
);

UPDATE coders SET xp_years=round((age - 18)/2);</sql><sql name="SQL 2">CREATE TABLE teams (id INTEGER PRIMARY KEY NOT NULL, name VARCHAR(50) NOT NULL);

-- SQLite sucks nepalaiko
-- ALTER TABLE coders SET CONSTRAINT fk_coders_teams FOREIGN KEY (team_id) REFERENCES teams (id);</sql><sql name="SQL 3">INSERT INTO &quot;teams&quot; (&quot;name&quot;) VALUES ('Back End');
INSERT INTO &quot;teams&quot; (&quot;name&quot;) VALUES ('DevOps');
INSERT INTO &quot;teams&quot; (&quot;name&quot;) VALUES ('Front End');

INSERT INTO &quot;coders&quot; (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;, &quot;age&quot;, &quot;team_id&quot;) VALUES ('Jonas', 'Jonaitis', 'jj@gmail.com', '20', '1');
INSERT INTO &quot;coders&quot; (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;, &quot;age&quot;, &quot;team_id&quot;) VALUES ('Antanas', 'Antanaitis', 'aa@gmail.com', '25', '1');
INSERT INTO &quot;coders&quot; (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;, &quot;age&quot;, &quot;team_id&quot;) VALUES ('Juozas', 'Juozaitis', 'jj@hotmail.com', '30', '2');
INSERT INTO &quot;coders&quot; (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;, &quot;age&quot;, &quot;team_id&quot;) VALUES ('Petras', 'Petraitis', 'pp@mail.lt', '29', '2');
INSERT INTO &quot;coders&quot; (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;, &quot;age&quot;, &quot;team_id&quot;) VALUES ('Virgis', 'Virgutis', 'vv@gmail.com', '21', '3');
INSERT INTO &quot;coders&quot; (&quot;first_name&quot;, &quot;last_name&quot;, &quot;email&quot;, &quot;age&quot;, &quot;team_id&quot;) VALUES ('Tomas', 'Aidietis', 'ta@imone.lt', '35', '3');

INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Sutvarkyti DB', '5');
INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Perdaryti dizainą', '1');
INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Perdaryti formas', '2');
INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Atnaujinti tvarkykles', '6');
INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Perkrauti serverius', '5');
INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Atnaujinti bibliotekas', '6');
INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Pakeisti logotipus', '2');
INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Atnaujinti dokumentaciją', '3');
INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Ištestuoti programą', '4');
INSERT INTO &quot;tasks&quot; (&quot;name&quot;, &quot;coder_id&quot;) VALUES ('Perdaryti API', '4');</sql><sql name="SQL 5">CREATE TABLE skills (
	id integer PRIMARY KEY NOT NULL, 
	name VARCHAR(50)
);

INSERT INTO &quot;skills&quot; (&quot;name&quot;) VALUES ('Python');
INSERT INTO &quot;skills&quot; (&quot;name&quot;) VALUES ('JS');
INSERT INTO &quot;skills&quot; (&quot;name&quot;) VALUES ('CSS');
INSERT INTO &quot;skills&quot; (&quot;name&quot;) VALUES ('Go');
INSERT INTO &quot;skills&quot; (&quot;name&quot;) VALUES ('AWS');
INSERT INTO &quot;skills&quot; (&quot;name&quot;) VALUES ('Linux');

CREATE TABLE coders_skills (
	coder_id INTEGER,
	skill_id INTEGER,
	FOREIGN KEY (coder_id) REFERENCES coders(id),
	FOREIGN KEY (skill_id) REFERENCES skills(id)
);

INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('1', '2');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('1', '3');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('2', '2');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('2', '3');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('3', '1');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('3', '4');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('4', '1');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('4', '6');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('5', '4');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('5', '5');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('6', '5');
INSERT INTO &quot;coders_skills&quot; (&quot;coder_id&quot;, &quot;skill_id&quot;) VALUES ('6', '6');

SELECT first_name, last_name, skills.name 
	FROM coders_skills 
	JOIN coders ON coder_id=coders.id 
	JOIN skills ON skill_id=skills.id;
</sql><sql name="SQL 6">CREATE TABLE passwords (
	id INTEGER PRIMARY KEY NOT NULL, 
	coder_id INTEGER UNIQUE, 
	pwd VARCHAR(255), 
	FOREIGN KEY (coder_id) REFERENCES coders(id)
);

INSERT INTO &quot;passwords&quot; (&quot;coder_id&quot;, &quot;pwd&quot;) VALUES ('1', '12345');
INSERT INTO &quot;passwords&quot; (&quot;coder_id&quot;, &quot;pwd&quot;) VALUES ('2', 'verisykret');
INSERT INTO &quot;passwords&quot; (&quot;coder_id&quot;, &quot;pwd&quot;) VALUES ('3', 'qwerty');
INSERT INTO &quot;passwords&quot; (&quot;coder_id&quot;, &quot;pwd&quot;) VALUES ('4', 'uauauai');
INSERT INTO &quot;passwords&quot; (&quot;coder_id&quot;, &quot;pwd&quot;) VALUES ('5', 'slaptazodis');
INSERT INTO &quot;passwords&quot; (&quot;coder_id&quot;, &quot;pwd&quot;) VALUES ('6', 'barzda');

SELECT first_name, pwd FROM coders 
	JOIN passwords ON passwords.coder_id=coders.id;
	
SELECT first_name, pwd FROM passwords 
	JOIN coders ON passwords.coder_id=coders.id;</sql><sql name="SQL 7">CREATE TABLE order_ (
   id integer PRIMARY KEY,
   customer_id integer,
   date_ string,
   status_id integer,
   FOREIGN KEY (customer_id) REFERENCES customer (id),
   FOREIGN KEY (status_id) REFERENCES status (id)
);

INSERT INTO order_ (customer_id, date_, status_id) VALUES (&quot;1&quot;, &quot;2025-02-19&quot;, &quot;1&quot;);
INSERT INTO order_ (customer_id, date_, status_id) VALUES (&quot;3&quot;, &quot;2017-12-05&quot;, &quot;4&quot;);
INSERT INTO order_ (customer_id, date_, status_id) VALUES (&quot;2&quot;, &quot;2019-04-13&quot;, &quot;1&quot;);
INSERT INTO order_ (customer_id, date_, status_id) VALUES (&quot;2&quot;, &quot;2023-05-25&quot;, &quot;3&quot;);
INSERT INTO order_ (customer_id, date_, status_id) VALUES (&quot;3&quot;, &quot;2014-03-14&quot;, &quot;2&quot;);
INSERT INTO order_ (customer_id, date_, status_id) VALUES (&quot;2&quot;, &quot;2026-05-19&quot;, &quot;4&quot;);</sql><sql name="SQL 8">CREATE TABLE customer (
	id INTEGER PRIMARY KEY NOT NULL, 
	first_name VARCHAR(50) NOT NULL, 
	last_name VARCHAR(255) NOT NULL, 
	email VARCHAR(255) UNIQUE
);

INSERT INTO customer (first_name, last_name, email) VALUES (&quot;Juozas&quot;, &quot;Juozaitis&quot;, &quot;juzis@gmail.com&quot;);
INSERT INTO customer (first_name, last_name, email) VALUES (&quot;Pranis&quot;, &quot;Pranauskas&quot;, &quot;prans@gmail.com&quot;);
INSERT INTO customer (first_name, last_name, email) VALUES (&quot;Edmis&quot;, &quot;Edmundauskas&quot;, &quot;edis@gmail.com&quot;);</sql><sql name="SQL 9">CREATE TABLE status (
	id INTEGER PRIMARY KEY NOT NULL, 
	name VARCHAR(255)
);

INSERT INTO status (name) VALUES (&quot;Vykdomas&quot;);
INSERT INTO status (name) VALUES (&quot;Atsaukatas&quot;);
INSERT INTO status (name) VALUES (&quot;Uzlaikytas&quot;);
INSERT INTO status (name) VALUES (&quot;Ivykdytas&quot;);

</sql><sql name="SQL 10">CREATE TABLE product_order (
	order_id INTEGER, 
	product_id INTEGER, 
	quantity INTEGER, 
	FOREIGN KEY (order_id) REFERENCES order_ (id), 
	FOREIGN KEY (product_id) REFERENCES product (id)
);

INSERT INTO product_order (order_id, product_id, quantity) VALUES (&quot;6&quot;, &quot;1&quot;, &quot;50&quot;);
INSERT INTO product_order (order_id, product_id, quantity) VALUES (&quot;3&quot;, &quot;4&quot;, &quot;100&quot;);
INSERT INTO product_order (order_id, product_id, quantity) VALUES (&quot;2&quot;, &quot;3&quot;, &quot;70&quot;);
INSERT INTO product_order (order_id, product_id, quantity) VALUES (&quot;1&quot;, &quot;1&quot;, &quot;20&quot;);
INSERT INTO product_order (order_id, product_id, quantity) VALUES (&quot;5&quot;, &quot;2&quot;, &quot;200&quot;);
INSERT INTO product_order (order_id, product_id, quantity) VALUES (&quot;4&quot;, &quot;3&quot;, &quot;50&quot;);</sql><sql name="SQL 11">CREATE TABLE product (
	id INTEGER PRIMARY KEY NOT NULL, 
	name VARCHAR(255), 
	price float
);

INSERT INTO product (name, price) VALUES (&quot;Zvyras&quot;, 200);
INSERT INTO product (name, price) VALUES (&quot;Shudas&quot;, 50);
INSERT INTO product (name, price) VALUES (&quot;Oras&quot;, 150);
INSERT INTO product (name, price) VALUES (&quot;Patarimas&quot;, 500);
</sql><sql name="SQL 12">SELECT order_.id as &quot;order_id&quot;, order_.date_ as &quot;date&quot;, customer.last_name as &quot;customer&quot;, 
sum(product_order.quantity * product.price) as price 
FROM product_order 
JOIN order_ ON order_.id=product_order.order_id 
JOIN product ON product.id=product_order.product_id 
JOIN customer ON customer.id=order_.customer_id 
GROUP BY order_id;

SELECT order_.id, product.name, product_order.quantity, product.price, product_order.quantity * product.price AS &quot;total&quot; 
FROM order_ 
JOIN product_order ON order_.id=product_order.order_id 
JOIN product ON product.id=product_order.product_id;

SELECT product.name, product_order.quantity, product.price, product_order.quantity * product.price AS &quot;total&quot; 
FROM order_ 
JOIN product_order ON order_.id=product_order.order_id 
JOIN product ON product.id=product_order.product_id;</sql><current_tab id="10"/></tab_sql></sqlb_project>
